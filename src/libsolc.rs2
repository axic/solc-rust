/* automatically generated by rust-bindgen */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
/// Callback used to retrieve additional source files. "Returns" two pointers that should be
/// heap-allocated and are free'd by the caller.
pub type CStyleReadFileCallback = ::std::option::Option<
    unsafe extern "C" fn(
        _path: *const ::std::os::raw::c_char,
        o_contents: *mut *mut ::std::os::raw::c_char,
        o_error: *mut *mut ::std::os::raw::c_char,
    ),
>;
extern "C" {
    #[link_name = "\u{1}_license"]
    pub fn license() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_version"]
    pub fn version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_compileJSON"]
    pub fn compileJSON(
        _input: *const ::std::os::raw::c_char,
        _optimize: bool,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_compileJSONMulti"]
    pub fn compileJSONMulti(
        _input: *const ::std::os::raw::c_char,
        _optimize: bool,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_compileJSONCallback"]
    pub fn compileJSONCallback(
        _input: *const ::std::os::raw::c_char,
        _optimize: bool,
        _readCallback: CStyleReadFileCallback,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_compileStandard"]
    pub fn compileStandard(
        _input: *const ::std::os::raw::c_char,
        _readCallback: CStyleReadFileCallback,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_solidity_license"]
    pub fn solidity_license() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_solidity_version"]
    pub fn solidity_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_solidity_compile"]
    pub fn solidity_compile(
        _input: *const ::std::os::raw::c_char,
        _readCallback: CStyleReadFileCallback,
    ) -> *const ::std::os::raw::c_char;
}
